# -*- coding: utf-8 -*-
"""Plus2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nwX2yKvsqMzLZrti_UELGVeN3TNwbSTo
"""



import torch
import numpy as np
from sklearn.model_selection import StratifiedShuffleSplit
import sys
import time
import math
import os
from torch import nn,optim
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

class EMA():
    def __init__(self, model, decay):
        self.model = model
        self.decay = decay
        self.shadow = {}
        self.backup = {}

    def register(self):
        for name, param in self.model.named_parameters():
            if param.requires_grad:
                self.shadow[name] = param.data.clone()

    def update(self):
        for name, param in self.model.named_parameters():
            if param.requires_grad:
                assert name in self.shadow
                new_average = (1.0 - self.decay) * param.data + self.decay * self.shadow[name]
                self.shadow[name] = new_average.clone()

    def apply_shadow(self):
        for name, param in self.model.named_parameters():
            if param.requires_grad:
                assert name in self.shadow
                self.backup[name] = param.data
                param.data = self.shadow[name]
                
    def restore(self):
        for name, param in self.model.named_parameters():
            if param.requires_grad:
                assert name in self.backup
                param.data = self.backup[name]
        self.backup = {}

class GlobalAvgPool2d(nn.Module):
  def __init__(self):
    super(GlobalAvgPool2d, self).__init__()
  def forward(self, x):
    return F.avg_pool2d(x, kernel_size=x.size()[2:])
  
class FlattenLayer(nn.Module):
  def __init__(self):
    super(FlattenLayer, self).__init__()
  def forward(self, x):
    return x.view(x.shape[0], -1)

class Residual(nn.Module):
  def __init__(self, in_channels, out_channels, use_1x1conv=False, stride=1):
    super(Residual,self).__init__()
    self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, stride=stride)
    self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1)
    if use_1x1conv:
      self.conv3 = nn.Conv2d(in_channels, out_channels, kernel_size=1 ,stride=stride)
    else:
      self.conv3 = None
    self.bn1 = nn.BatchNorm2d(out_channels)
    self.bn2 = nn.BatchNorm2d(out_channels)

  def forward(self, x):
    y = F.relu(self.bn1(self.conv1(x)))
    y = self.bn2(self.conv2(y))
    if self.conv3:
      x = self.conv3(x)
    return F.relu(y + x)

net = nn.Sequential(
    nn.Conv2d(1, 64, kernel_size=7 ,stride=2, padding=3),
    nn.BatchNorm2d(64),
    nn.ReLU(),
    nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
)

# 残差块
def resnet_block(in_channels, out_channels, num_residuals,first_block=False):
  if first_block:
    assert in_channels == out_channels # 输出同输入

  blk = []
  for i in range(num_residuals):
    if i == 0 and not first_block:
      blk.append(Residual(in_channels, out_channels, use_1x1conv=True, stride=2))
    else:
      blk.append(Residual(out_channels, out_channels))

    return nn.Sequential(*blk)

net.add_module("resnet_block1", resnet_block(64, 64, 2, first_block=True))
net.add_module("resnet_block2", resnet_block(64, 128, 2))
net.add_module("resnet_block3", resnet_block(128, 256, 2))
net.add_module("resnet_block4", resnet_block(256, 512, 2))

net.add_module("global_avg_pool", GlobalAvgPool2d())
net.add_module("fc", nn.Sequential(FlattenLayer(),nn.Linear(512, 10)))

# print('Resnet18')
 # print(net)
 net.to(device)
 ema = EMA(net, 0.995)
 ema.register()

def vgg_block(num_convs, in_channels, out_channels):
  blk2 = []
  for i in range(num_convs):
    if i == 0:
      blk2.append(nn.Conv2d(in_channels, out_channels,kernel_size=3, padding=1))
    else:
      blk2.append(nn.Conv2d(out_channels, out_channels,kernel_size=3, padding=1))
    blk2.append(nn.ReLU())
  blk2.append(nn.MaxPool2d(kernel_size=2, stride=2)) # 这⾥会使宽⾼减半
  
  return nn.Sequential(*blk2)

ratio = 8
conv_arch = ((1, 1, 64//ratio), 
             (1, 64//ratio, 128//ratio), 
             (2, 128//ratio, 256//ratio), 
             (2, 256//ratio, 512//ratio),
             (2, 512//ratio, 512//ratio))

# 经过5个vgg_block, 宽⾼会减半5次, 变成 224/32 = 7
fc_features = 512 * 7 * 7 // ratio # c * w * h
fc_hidden_units = 4096 // ratio # 任意

def vgg(conv_arch, fc_features, fc_hidden_units=4096):
  net = nn.Sequential()
  # 卷积层部分
  for i, (num_convs, in_channels, out_channels) in enumerate(conv_arch):
    # 每经过⼀个vgg_block都会使宽⾼减半
    net.add_module("vgg_block_" + str(i+1),vgg_block(num_convs, in_channels, out_channels))

  # 全连接层部分
  net.add_module("fc", nn.Sequential(FlattenLayer(),
                                     nn.Linear(fc_features,fc_hidden_units),
                                     nn.ReLU(),
                                     nn.Dropout(0.5),
                                     nn.Linear(fc_hidden_units,fc_hidden_units),
                                     nn.ReLU(),
                                     nn.Dropout(0.5),
                                     nn.Linear(fc_hidden_units, 10)
                                     ))

  return net

net2 = vgg(conv_arch, fc_features, fc_hidden_units)
# print('VGG11')
# print(net2)
net2.to(device)
ema2 = EMA(net2, 0.995)
ema2.register()

class Cutout(object):
    """Randomly mask out one or more patches from an image.
    Args:
        n_holes (int): Number of patches to cut out of each image.
        length (int): The length (in pixels) of each square patch.
    """
    def __init__(self, n_holes, length):
        self.n_holes = n_holes
        self.length = length

    def __call__(self, img):
        """
        Args:
            img (Tensor): Tensor image of size (C, H, W).
        Returns:
            Tensor: Image with n_holes of dimension length x length cut out of it.
        """
        h = img.size(1)
        w = img.size(2)

        mask = np.ones((h, w), np.float32)

        for n in range(self.n_holes):
        	# (x,y)表示方形补丁的中心位置
            y = np.random.randint(h)
            x = np.random.randint(w)

            y1 = np.clip(y - self.length // 2, 0, h)
            y2 = np.clip(y + self.length // 2, 0, h)
            x1 = np.clip(x - self.length // 2, 0, w)
            x2 = np.clip(x + self.length // 2, 0, w)

            mask[y1: y2, x1: x2] = 0.

        mask = torch.from_numpy(mask)
        mask = mask.expand_as(img)
        img = img * mask

        return img

def load_data_fashion_mnist(batch_size, root='../F_MNIST', use_normalize=False, mean=None, std=None, resize=None):
  trans = []
  trans2= []
  if use_normalize:
    normalize = transforms.Normalize(mean=[mean], std=[std])
    trans.append(transforms.RandomCrop(28, padding=2))
    trans.append(transforms.RandomHorizontalFlip())

    if resize:
      trans.append(transforms.Resize(size=resize))
      trans2.append(transforms.Resize(size=resize))

    trans.append(transforms.ToTensor())
    trans2.append(transforms.ToTensor())
    trans.append(normalize)
    trans2.append(normalize)
    trans.append(Cutout(n_holes=8, length=2))

    train_augs = transforms.Compose(trans)
    test_augs = transforms.Compose(trans2)
  else:
    train_augs = transforms.Compose([transforms.ToTensor()])
    test_augs = transforms.Compose([transforms.ToTensor()])

  mnist_train = torchvision.datasets.FashionMNIST(root=root, train=True, download=True, transform=train_augs)
 # mnist_val = torchvision.datasets.FashionMNIST(root=root, train=True, download=True, transform=test_augs)
  mnist_test = torchvision.datasets.FashionMNIST(root=root, train=False, download=True, transform=test_augs)



  if sys.platform.startswith('win'):
    num_workers = 0
  else:
    num_workers = 4

  train_iter = torch.utils.data.DataLoader(mnist_train, batch_size=batch_size, shuffle=True, num_workers=num_workers)
  # val_iter = torch.utils.data.DataLoader(mnist_val, batch_size=batch_size, shuffle=False, num_workers=num_workers)
  test_iter = torch.utils.data.DataLoader(mnist_test, batch_size=batch_size, shuffle=False, num_workers=num_workers)

  return train_iter, test_iter

# Commented out IPython magic to ensure Python compatibility.
def evaluate_accuracy(data_iter, net, ema, device=None):
    if device is None and isinstance(net, torch.nn.Module):
        # 如果没指定device就使用net的device
        device = list(net.parameters())[0].device

    ema.apply_shadow()
    net.eval() 
    acc_sum, n = 0.0, 0
    
    with torch.no_grad():
        for X, y in data_iter:
            acc_sum += (net(X.to(device)).argmax(dim=1) == y.to(device)).float().sum().cpu().item()
            n += y.shape[0]
    net.train() # 改回训练模式
    ema.restore()
    return acc_sum / n

def evaluate_accuracy_test(data_iter, net1, net2, ema1, ema2, ndevice=torch.device('cuda' if torch.cuda.is_available() else 'cpu')):
   
    acc_sum, n = 0.0, 0
    preds_list =[]
    idx = 0
   

    with torch.no_grad():
        for X, y in data_iter:
          if isinstance(net1, torch.nn.Module) and isinstance(net2, torch.nn.Module):
            ema1.apply_shadow()
            ema2.apply_shadow()
            net1.eval() 
            net2.eval()
            pred=net1(X.to(device))
            pred.add_(net2(X.to(device)))
            pred = F.softmax(pred, dim=1)

            batch_pred = list(pred.argmax(dim=1).cpu().numpy())
            for y_pred in batch_pred:
              preds_list.append((idx, y_pred))
              idx += 1

            acc_sum += (pred.argmax(dim=1) == y.to(device)).float().sum().cpu().item()

            net1.train() # 改回训练模式
            net2.train() # 改回训练模式
            ema1.restore()
            ema2.restore()

          n += y.shape[0]

    print('生成提交结果文件....')
    with open('/content/drive/My Drive/python/EMAsubmission2.csv', 'w') as f:
      f.write('ID,Prediction\n')
      for id, pred in preds_list:
        f.write('{},{}\n'.format(id, pred))
   
    return acc_sum / n


def train_model(net, ema, train_iter, test_iter, batch_size, optimizer, device, num_epochs):
    net = net.to(device)
    print("training on ", device)
    loss = torch.nn.CrossEntropyLoss()
    best_test_acc = 0
    for epoch in range(num_epochs):
        train_l_sum, train_acc_sum, n, batch_count, start = 0.0, 0.0, 0, 0, time.time()
        for X, y in train_iter:
            X = X.to(device)
            y = y.to(device)
            y_hat = net(X)
            l = loss(y_hat, y)
            optimizer.zero_grad()
            l.backward()
            optimizer.step()
            ema.update()
            train_l_sum += l.cpu().item()
            train_acc_sum += (y_hat.argmax(dim=1) == y).sum().cpu().item()
            n += y.shape[0]
            batch_count += 1
            
        test_acc = evaluate_accuracy(test_iter, net, ema)
        print('epoch %d, loss %.4f, train acc %.4f, test acc %.4f, time %.1f sec'
#               % (epoch + 1, train_l_sum / batch_count, train_acc_sum / n, test_acc, time.time() - start))
        
        if test_acc > best_test_acc:
            print('find best! save at ./python/EMAbest12.pth')
            best_test_acc = test_acc
            torch.save(ema, '/content/drive/My Drive/python/EMA_ResNet2.pkl')
            PATH = '/content/drive/My Drive/python/EMAbest12.pth'
            torch.save(net.state_dict(), PATH)

def train_model2(net, ema, train_iter, test_iter, batch_size, optimizer, device, num_epochs):
    net = net.to(device)
    print("training on ", device)
    loss = torch.nn.CrossEntropyLoss()
    best_test_acc = 0
    for epoch in range(num_epochs):
        train_l_sum, train_acc_sum, n, batch_count, start = 0.0, 0.0, 0, 0, time.time()
        for X, y in train_iter:
            X = X.to(device)
            y = y.to(device)
            y_hat = net(X)
            l = loss(y_hat, y)
            optimizer.zero_grad()
            l.backward()
            optimizer.step()
            ema.update()
            train_l_sum += l.cpu().item()
            train_acc_sum += (y_hat.argmax(dim=1) == y).sum().cpu().item()
            n += y.shape[0]
            batch_count += 1
            
        test_acc = evaluate_accuracy(test_iter, net, ema)
        print('epoch %d, loss %.4f, train acc %.4f, test acc %.4f, time %.1f sec'
#               % (epoch + 1, train_l_sum / batch_count, train_acc_sum / n, test_acc, time.time() - start))
        
        if test_acc > best_test_acc:
            print('find best! save at ./python/EMAbest22.pth')
            best_test_acc = test_acc
            torch.save(ema, '/content/drive/My Drive/python/EMA_VGG2.pkl')
            PATH = '/content/drive/My Drive/python/EMAbest22.pth'
            torch.save(net.state_dict(), PATH)

batch_size = 64
train_iter, test_iter = load_data_fashion_mnist(batch_size,use_normalize=False)

# mean
temp_sum = 0
cnt = 0
for X, y in train_iter:
    if y.shape[0] != batch_size:
        break   # 最后一个batch不足batch_size,这里就忽略了
    channel_mean = torch.mean(X, dim=(0,2,3))  # 按channel求均值(不过这里只有1个channel)
    cnt += 1   # cnt记录的是batch的个数，不是图像
    temp_sum += channel_mean[0].item()
dataset_global_mean = temp_sum / cnt
print('整个数据集的像素均值:{}'.format(dataset_global_mean))
# 求整个数据集的标准差
cnt = 0
temp_sum = 0
for X, y in train_iter:
    if y.shape[0] != batch_size:
        break   # 最后一个batch不足batch_size,这里就忽略了
    residual = (X - dataset_global_mean) ** 2
    channel_var_mean = torch.mean(residual, dim=(0,2,3))  
    cnt += 1   # cnt记录的是batch的个数，不是图像
    temp_sum += math.sqrt(channel_var_mean[0].item())
dataset_global_std = temp_sum / cnt
print('整个数据集的像素标准差:{}'.format(dataset_global_std))

batch_size = 64 
train_iter, test_iter = load_data_fashion_mnist(batch_size, use_normalize=True, mean=dataset_global_mean, std=dataset_global_std, resize=224)

print('training....') 
lr = 0.001 
num_epochs = 100

optimizer = optim.Adam(net.parameters(), lr=lr)
# optimizer = optim.SGD(net.parameters(),lr=lr, momentum=0.9, weight_decay=5e-4)

train_model(net,ema, train_iter, test_iter, batch_size, optimizer, device, num_epochs)

batch_size = 64 
train_iter, test_iter = load_data_fashion_mnist(batch_size, use_normalize=True, mean=dataset_global_mean, std=dataset_global_std,resize=224)

print('training....') 
lr = 0.001 
num_epochs = 100

optimizer = optim.Adam(net2.parameters(), lr=lr)
#optimizer = optim.SGD(net.parameters(),lr=lr, momentum=0.9, weight_decay=5e-4)

train_model2(net2, ema2, train_iter, test_iter, batch_size, optimizer, device, num_epochs)

PATH = '/content/drive/My Drive/python/EMAbest12.pth'
net.load_state_dict(torch.load(PATH))
net = net.to(device)
ema = torch.load('/content/drive/My Drive/python/EMA_ResNet2.pkl')
ema.model= net
test_acc = evaluate_accuracy(test_iter, net, ema)
print(test_acc)

PATH = '/content/drive/My Drive/python/EMAbest22.pth'
net2.load_state_dict(torch.load(PATH))
net2 = net2.to(device)
ema2 = torch.load('/content/drive/My Drive/python/EMA_VGG2.pkl')
ema2.model= net2
test_acc = evaluate_accuracy(test_iter, net2, ema2)
print(test_acc)

test_acc = evaluate_accuracy_test(test_iter, net, net2, ema, ema2)
print(test_acc)

from google.colab import drive
drive.mount('/content/drive')